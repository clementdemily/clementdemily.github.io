<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clément Demily</title>
    <description>Notes d&#39;un développeur</description>
    <link>http://clement-demily.fr/</link>
    <atom:link href="http://clement-demily.fr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 19 Oct 2015 14:08:22 +0200</pubDate>
    <lastBuildDate>Mon, 19 Oct 2015 14:08:22 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Migrer de Amazon Web Service S3 vers Microsoft Azure Blob</title>
        <description>&lt;h2 id=&quot;backups-des-buckets-s3&quot;&gt;Backups des buckets S3&lt;/h2&gt;

&lt;p&gt;Dans un premier temps, nous ferons une copie locale de nos buckets &lt;strong&gt;S3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pour cela, nous devrons utiliser l’utilitaire &lt;strong&gt;awscli&lt;/strong&gt; qui nous permet de manipuler nos services &lt;strong&gt;AWS&lt;/strong&gt; depuis notre console.&lt;/p&gt;

&lt;p&gt;Installation de awscli sur mac (via homebrew):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; brew install awscli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Installation de awscli sur unix (via pip):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; pip install awscli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Une fois installé, configurons notre utilitaire:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; aws configure
AWS Access Key ID &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
AWS Secret Access Key &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
Default region name &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
Default output format &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;None&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vous devez ici remplir les champs avec leur valeur correspondantes.
&lt;a href=&quot;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&quot;&gt;lien vers la documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vous pouvez dès à présent créer un nouveau dossier et effectuer une copie locale de vos buckets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; mkdir buckets-backup
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buckets-backup
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; aws s3 sync s3://mon-bucket .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si un message d’erreur en rapport avec une erreur de droit apparait (&lt;em&gt;AccessDenied&lt;/em&gt;), verifier bien que l’utilisateur associé a votre configuration dispose des droits nécessaire sur le service &lt;strong&gt;S3&lt;/strong&gt; de votre compte &lt;strong&gt;AWS&lt;/strong&gt;. &lt;a href=&quot;https://console.aws.amazon.com/iam/home&quot;&gt;Lien vers IAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si le problème persiste, créer un nouvel utilisateur lui attribuant le droit “&lt;strong&gt;AdministratorAccess&lt;/strong&gt;” ou “&lt;strong&gt;AmazonS3FullAccess&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;Utiliser ensuite ses identifiants pour reconfigurer &lt;strong&gt;awscli&lt;/strong&gt;.
&lt;img src=&quot;/img/2015/10/IAM.png&quot; alt=&quot;IAM&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;transfert-des-buckets-vers-microsoft-blob&quot;&gt;Transfert des buckets vers Microsoft Blob&lt;/h2&gt;

&lt;p&gt;Nous disposons de plusieurs outils pour transférer des fichiers sur Microsoft Blob (powershell, AzCopy, …)&lt;/p&gt;

&lt;p&gt;Nous utiliserons une méthode alternative en utilisant le logiciel gratuit &lt;a href=&quot;https://cyberduck.io/&quot;&gt;Cyberduck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Une fois le logiciel installé, cliquer sur le bouton “Connecter” et sélectionner dans le menu déroulant l’option “Windows Azure Storage”
Les informations à saisir se trouve sur votre portail azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/azure-account-storage.png&quot; alt=&quot;Azure account storage&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/cyberduck.png&quot; alt=&quot;Cyberduck&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le champ “Nom d’utilisateur” correspond au champ “Account Storage Name”. Le champ “Mot de passe” est une des clés “Access Keys”.&lt;/p&gt;

&lt;p&gt;Une fois la connexion établie, il ne vous restera plus qu’a effectuer un “glisser-déposer” dans la fenêtre qui est apparue.&lt;/p&gt;

&lt;p&gt;Pour finir, aller sur votre portail et verifier que vos &lt;strong&gt;Containers&lt;/strong&gt; (alias buckets) ont bien les droits que vous souhaitez attribuer. 
Les containers sont privés par défaut, si vous désirer les rendre public, changer la règle d’accès du container avec la valeur “Container”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/containers.png&quot; alt=&quot;containers&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Oct 2015 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/10/15/migrer-aws-s3-azure-blob.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/10/15/migrer-aws-s3-azure-blob.html</guid>
        
        <category>cloud</category>
        
        <category>s3</category>
        
        <category>blob</category>
        
        
        <category>tutoriel</category>
        
        <category>microsoft azure</category>
        
      </item>
    
      <item>
        <title>Créer un serveur postgresql sur microsoft azure</title>
        <description>&lt;h2 id=&quot;cration-et-configuration-de-linstance&quot;&gt;Création et configuration de l’instance&lt;/h2&gt;

&lt;p&gt;Rendez-vous sur le &lt;a href=&quot;https://portal.azure.com&quot;&gt;portail azure&lt;/a&gt;
Pour cet exemple, j’ai choisi de prendre une image ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/create-instance.png&quot; alt=&quot;create-instance&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Une fois l’instance créée, vous pourrez consulter les informations de celle-ci:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/instance-details.png&quot; alt=&quot;instance-details&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le champ qui nous intéresse ici est Virtual IP address.&lt;/p&gt;

&lt;p&gt;Nous devons ensuite exposer un port de notre instance, pour cela, cliquer sur “All setting”, puis sur “Endpoints”.
Ajouter un nouveau champs correspondant aux ports que vous voulez exposé.
J’ai choisi d’exposer le port part défaut de postgresql (5432), mais libre a vous de choisir le port que vous désirez.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/10/open-port.png&quot; alt=&quot;open-port&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connexion--la-machine-et-installation-des-packages&quot;&gt;Connexion à la machine et installation des packages&lt;/h2&gt;

&lt;p&gt;Une fois l’instance créée et configurée, vous pourrez vous connecter en SSH à l’aide la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; ssh username@ip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Téléchargeons le package postgresql (9.3) ainsi que les extensions correspondantes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;username@ip&amp;gt; sudo apt-get install -y postgresql postgresql-contrib-9.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;cration-des-donnes-de-tests&quot;&gt;Création des données de tests&lt;/h2&gt;

&lt;p&gt;Créons un nouvel utilisateur et une nouvelle base de donnée:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;username@ip&amp;gt; sudo -u postgres createuser -r -d -s my_user
username@ip&amp;gt; createdb my_new_db
username@ip&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ALTER ROLE my_user WITH ENCRYPTED PASSWORD &amp;#39;password&amp;#39;;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; psql my_new_db&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuration-de-postgresql&quot;&gt;Configuration de postgresql&lt;/h2&gt;

&lt;p&gt;Nous devons définir des règles d’accès dans le fichier pg_hba.conf. (/etc/postgresql/9.3/main/pg_hba.conf)
Le fichier de configuration est plutôt clair et les commentaires expliquent bien le formatage de la configuration.&lt;/p&gt;

&lt;p&gt;Pour mon exemple, my_user et my_new_db correspond à l’utilisateur et à la base de données que venons de créer.
La valeur &lt;strong&gt;IP_MACHINE_CLIENT&lt;/strong&gt; doit être remplacée par l’adresse IP de la machine que vous voulez utiliser pour vous connecter à votre base de données.&lt;/p&gt;

&lt;p&gt;Cette commande permettra de configurer le fichier sans l’éditer.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;username@ip&amp;gt; sudo &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;host    my_new_db    my_user    IP_MACHINE_CLIENT/24    trust&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/pg_hba.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous devons configurer postgresql pour qu’il écoute d’autre adresse que localhost.
Pour cela, nous devons trouver le champ “listen_address” dans le fichier postgresql.conf. ( /etc/postgresql/9.3/main/postgresql.conf)
Comme expliqué dans le fichier, vous pouvez utiliser plusieurs valeurs séparées par une virgule.
Dans cet exemple, j’utilise la valeur ‘*’ pour écouter toutes les adresses.&lt;/p&gt;

&lt;p&gt;C’est également dans ce fichier que vous pourrez modifier le port d’écoute de postgresql.&lt;/p&gt;

&lt;p&gt;Le champ “listen_address” est commenté par défaut (9.3), cette commande permettra de configurer le fichier sans l’éditer.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;username@ip&amp;gt; sudo &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ‘listen_address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/postgresql.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour finir, nous devons redémarrer le service:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;username@ip&amp;gt; sudo service postgresql restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;p&gt;Depuis votre machine (celle qui a l’IP &lt;strong&gt;IP_MACHINE_CLIENT&lt;/strong&gt;), vous pourrez vous connecter à l’aide de la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;IP_MACHINE_CLIENT&amp;gt; psql -h IP_INSTANCE_DB -p &lt;span class=&quot;m&quot;&gt;5432&lt;/span&gt; -u my_new_db my_user&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;IP_INSTANCE_DB correspond à l’IP de votre instance serveur postgresql, celle que nous avons créé au début de cet article.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Oct 2015 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/10/15/creer-un-serveur-postgresql-sur-microsoft-azure.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/10/15/creer-un-serveur-postgresql-sur-microsoft-azure.html</guid>
        
        <category>cloud</category>
        
        <category>postgresql</category>
        
        <category>unix</category>
        
        
        <category>tutoriel</category>
        
        <category>microsoft azure</category>
        
      </item>
    
      <item>
        <title>Installer Elixir sur mac</title>
        <description>&lt;p&gt;Voilà quelques semaines que je me penche sur un nouveau langage: &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;.
Elixir est un langage fonctionnel dynamique, sa syntaxe se rapproche de celle de Ruby.
Elixir bénéficie de l’Erlang VM, Erlang étant utilisé pour construire des systèmes distribués et robustes.
D’ailleurs, les bibliothèques basées sur Erlang seront compatibles et utilisables avec Elixir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015/09/elixir.png&quot; alt=&quot;Logo-elixir&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pourquoi-apprendre-elixir&quot;&gt;Pourquoi apprendre Elixir?&lt;/h2&gt;

&lt;p&gt;Tout d’abord Elixir est un langage fonctionnel et possède une syntaxe proche du Ruby (donc agréable) par opposition à l’OCAML ou du lisp qui ont une syntaxe qui pourraient en rebuter plus d’un.&lt;/p&gt;

&lt;p&gt;Si vous faites majoritairement de la programmation orientée objet, la programmation fonctionnelle vous permettra de “casser” un peu la routine en résolvant des problèmes de manières différentes.
Il est intéressant de connaitre les différences pour tirer parti du meilleurs des deux approches.&lt;/p&gt;

&lt;p&gt;Elixir possède une communauté jeune mais très active. Comme pour Ruby, Elixir possède son propre gestionnaire de package mettant à disposition des plugins réalisés par la communauté.
Il existe déjà un framework web &lt;a href=&quot;http://www.phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt; très fortement inspiré de Ruby On Rails.&lt;/p&gt;

&lt;h2 id=&quot;installation-sur-mac&quot;&gt;Installation sur mac&lt;/h2&gt;

&lt;p&gt;Pour installer Elixir (et Erlang) sur mac, vous devez au préalable avoir &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; sur votre machine.&lt;/p&gt;

&lt;p&gt;Ensuite il vous suffira de taper la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install elixir&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voilà, Elixir ainsi qu’Erlang sont installé sur votre système!&lt;/p&gt;

&lt;p&gt;Lancer iex (l’équivalent de irb):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;iex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puis taper le code suivant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voilà! :)&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Sep 2015 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/09/11/installer-elixir-sur-mac.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/09/11/installer-elixir-sur-mac.html</guid>
        
        <category>mac</category>
        
        
        <category>tutoriel</category>
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Rob Pike - &quot;Concurrency Is Not Parallelism&quot;</title>
        <description>&lt;p&gt;Depuis quelques temps nous entendons de plus en plus le terme “concurrent”. En effet, le langage Go a en quelque sorte populariser le terme (mais n’est en aucun cas le premier langage a avoir implémenter un tel modèle)&lt;/p&gt;

&lt;p&gt;C’est en voulant bien comprendre ce qu’étais la concurrence en programmation que je suis tombé sur cette vidéo.&lt;/p&gt;

&lt;h2 id=&quot;le-sujet&quot;&gt;Le sujet&lt;/h2&gt;

&lt;p&gt;Comme vous l’aurez compris, nous allons voir aujourd’hui en quoi consiste le modèle concurrent et en quoi il diffère du modèle parallèle.&lt;/p&gt;

&lt;p&gt;J’ai trouvé la conférence dont on va parler aujourd’hui il y a quelques mois et je pense que c’est probablement l’une des meilleures conférence sur ce sujet.&lt;/p&gt;

&lt;p&gt;En plus d’être intéressante, elle est vraiment facile à suivre car il y a beaucoup d’analogies et le talker explique bien.&lt;/p&gt;

&lt;h2 id=&quot;le-talker&quot;&gt;Le talker&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rob Pike&lt;/strong&gt; est un ancien chercheur des Laboratoires Bell. Il est maintenant ingénieur chez Google et fait partie des créateurs du langage de programmation Go.&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&quot;https://fr.wikipedia.org/wiki/Rob_Pike&quot; target=&quot;_blank&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;la-vido&quot;&gt;La vidéo&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cN_DpYBzKso&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/06/30/rob-pike-concurrency-is-not-parallelism.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/06/30/rob-pike-concurrency-is-not-parallelism.html</guid>
        
        <category>parallelism</category>
        
        <category>concurrency</category>
        
        <category>golang</category>
        
        
        <category>review de conference</category>
        
      </item>
    
      <item>
        <title>Ajouter un utilisateur au groupe www-data</title>
        <description>&lt;p&gt;Certains fichiers et dossiers peuvent nécessiter que l’utilisateur fasse parti d’un groupe pour être ajouté, modifié ou supprimé. C’est le cas par exemple du groupe &lt;em&gt;www-data&lt;/em&gt;. Si vous décider d’appliquer une règle de sécurité pour tout les dossiers et fichiers qui vont être vu par &lt;strong&gt;apache2&lt;/strong&gt; ou &lt;strong&gt;nginx&lt;/strong&gt;, votre utilisateur devra faire parti du groupe &lt;em&gt;www-data&lt;/em&gt; pour les modifiers.&lt;/p&gt;

&lt;p&gt;Nous allons voir ici comment créer un utilisateur et comment ajouter cet utilisateur à un groupe.&lt;/p&gt;

&lt;h2 id=&quot;cration-dun-nouvel-utilisateur-sous-unix&quot;&gt;Création d’un nouvel utilisateur sous unix&lt;/h2&gt;

&lt;p&gt;Nous allons tout d’abord créer un nouvel utilsateur et lui attribuer un mot de passe. Nous prendrons pour exemple l’utilisateur “clement”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo useradd clement 
sudo passwd clement&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour verifier les informations de cet utilisateur, vous pourrez utiliser les commandes suivantes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;id clement
groups clement&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ajouter-lutilisateur--un-groupe-existant&quot;&gt;Ajouter l’utilisateur à un groupe existant&lt;/h2&gt;

&lt;p&gt;Certains dossiers et fichiers ne peuvent être modifier ou executer seulement par les utilisateurs membre d’un groupe particulier.&lt;/p&gt;

&lt;p&gt;Pour ajouter l’utilisateur clement à un groupe, nous pouvons utiliser la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo usermod -a -G www-data clement&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 29 Jun 2015 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/06/29/ajouter-un-utilisateur-au-groupe-www-data.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/06/29/ajouter-un-utilisateur-au-groupe-www-data.html</guid>
        
        <category>apache2</category>
        
        <category>nginx</category>
        
        
        <category>tutoriel</category>
        
        <category>unix</category>
        
      </item>
    
      <item>
        <title>Refonte du site</title>
        <description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;Après réflexion et ayant peu de temps a concacrer à la maintenance de mon blog, j’ai pris la décision de changer de plateforme.
J’ai donc migré de wordpress à jekyll.&lt;/p&gt;

&lt;h1 id=&quot;quest-ce-que-jekyll&quot;&gt;Qu’est-ce que jekyll?&lt;/h1&gt;

&lt;p&gt;Jekyll est une gem ruby qui permet de générer des sites statiques à la volé. Cet outils me permet de rédiger mes billets dans un fichier au format markdown et de générer des pages HTML grace au parseur intégré.
Cela me permet donc de versionner le site et en même temps les articles (et pages) sur un repository.&lt;/p&gt;

&lt;h1 id=&quot;pourquoi-jekyll&quot;&gt;Pourquoi jekyll?&lt;/h1&gt;

&lt;p&gt;Comme dit plus haut, je n’ai malheureusement pas assez de temps ni l’envie de me concacrer à la maintenance d’un wordpress. Il me fallait trouver une solution simple, rapide et très facilement configurable. 
Il me fallait aussi pouvoir importer mes billets précédemment rédégé sous wordpress.
De plus, je ne voulais plus me soucier de faire des backups de base de données régulières.
Jekyll était donc tout à fait capable de repondre a mes besoin.&lt;/p&gt;

&lt;p&gt;L’installation se fait par la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ensuite, nous pouvons créer une application jekyll:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new NOM_APPLICATION&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jekyll embarque un serveur intégré qui permet de générer le site statique, puis surveille les changements de vos fichiers et re-génère les pages automatiquement.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il ne me reste plus qu’à écrire de nouveau articles! :-)&lt;/p&gt;

&lt;p&gt;Vous pourrez retrouver toutes les resources nécessaires sur les sites suivant:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jekyllrb.com/docs/&quot;&gt;http://www.jekyllrb.com/doc/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://import.jekyllrb.com/docs/wordpress/&quot;&gt;http://import.jekyllrb.com/docs/wordpress/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 26 Jun 2015 22:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2015/06/26/refonte-du-site.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2015/06/26/refonte-du-site.html</guid>
        
        <category>jekyll</category>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Le Behavior Driven-Development avec Cucumber</title>
        <description>&lt;p&gt;Aujourd’hui nous allons parler du &lt;em&gt;Behavior-Driven Development&lt;/em&gt;, plus particulièrement son utilisation dans &lt;strong&gt;RubyOnRails&lt;/strong&gt; grâce à la gem &lt;strong&gt;cucumber&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;cest-quoi-le-bdd&quot;&gt;C’est quoi le BDD?&lt;/h1&gt;

&lt;p&gt;le &lt;a href=&quot;http://www.wikiwand.com/fr/Behavior_Driven_Development&quot;&gt;Behavior-Driven Development&lt;/a&gt; est une méthode agile qui met l’accent sur le travail en collaboration entre des personnes techniques (comme des ingénieurs) avec des personnes non techniques.&lt;/p&gt;

&lt;p&gt;La particularité de cette méthode de travail est qu’elle est très “verbeuse”: On décrit une fonctionnalité (&lt;em&gt;feature&lt;/em&gt;) en langage naturel, puis on écrit des scénarios d’acceptation (toujours en langage naturel) pour illustrer celle-ci. Chaque scénario est composé de plusieurs étapes (&lt;em&gt;steps&lt;/em&gt;) qui commencent toutes par un mot-clé significatif: &lt;em&gt;Given&lt;/em&gt;, &lt;em&gt;When&lt;/em&gt;, et &lt;em&gt;Then&lt;/em&gt; qui peuvent être liés par le mot-clé &lt;em&gt;And&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;et-donc-que-fait-cucumber-dans-lhistoire&quot;&gt;Et donc, que fait cucumber dans l’histoire?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; est une gem qui permet de rédiger et d’exécuter ce type de test d’acceptation de manière automatique.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2014/05/cucumber-logo.png&quot; alt=&quot;Logo-cucumber&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nous décrivons notre fonctionnalité dans un fichier .feature, puis nous implémentons chaque steps dans un fichier à part.&lt;/p&gt;

&lt;p&gt;Tout d’abord, installons &lt;strong&gt;cucumber&lt;/strong&gt; et &lt;strong&gt;capybara&lt;/strong&gt; via notre gemfile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cucumber-rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 1.4.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;database_cleaner&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 1.2.0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;capybara&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 2.2.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Noter que j’utilise &lt;strong&gt;cucumber&lt;/strong&gt; dans un projet &lt;strong&gt;rails&lt;/strong&gt;, je peux donc directement utiliser la gem &lt;strong&gt;cucumber-rails&lt;/strong&gt;. On nous renseigne sur le dépôt github qu’il est fortement recommandé d’installer la gem &lt;strong&gt;database_cleaner&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Installer les nouvelles gems via la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ensuite, vous pouvez exécuter la commande suivante :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails g cucumber:install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cette commande installeras les fichiers et dossiers nécessaire au fonctionnement de &lt;strong&gt;cucumber&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En exécutant la commande cucumber vous pourrez lancer les tests d’acceptation que vous aurez préalablement rédigé.&lt;/p&gt;

&lt;h1 id=&quot;notre-premire-feature&quot;&gt;Notre première feature&lt;/h1&gt;

&lt;p&gt;Pour illustrer le fonctionnement de cucumber je vais utiliser l’exemple d’un formulaire d’authentification. 
Nous partons du postulat que nous avons un formulaire d’authentification fonctionnel et que celui à besoin d’être testé et de figurer dans notre répertoire de tests d’acceptations.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Authentication&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;website&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visitor&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@authentication_form&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;m a guest on the sign in page&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    And I fill in &amp;quot;user_email&amp;quot; with &amp;quot;mymail@mail.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    And I fill in &amp;quot;user_password&amp;quot; with &amp;quot;mysecretpassword&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    When I press &amp;quot;Sign in&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    Then I should be authenticate&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  @authentication_form&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  Scenario: Authentication attempt via sign in form (password error)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    Given I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_email&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mymail@mail.com&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;anotherpassword&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Sign in&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldn&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticated&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comme vous pouvez le voir, on ne croirait pas voir des tests mais bien l’extrait d’un cahier des charges! (En anglais ;) )&lt;/p&gt;

&lt;p&gt;Voici le fichier contenant les &lt;em&gt;steps&lt;/em&gt; associées a cette &lt;em&gt;feature&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;authentication_steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I&amp;#39;m a guest on the sign in page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_user_session_path&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I fill in &amp;quot;(.*?)&amp;quot; with &amp;quot;(.*?)&amp;quot;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should be redirect on the Sign up page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Inscription&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I press &amp;quot;(.*?)&amp;quot;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should be authenticate$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are now authenticate&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I shouldn&amp;#39;t be authenticated$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Authentication error&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On peut observer qu’une &lt;em&gt;step&lt;/em&gt; n’est composée ici que d’une action élémentaire. Ce n’est pas une règle mais plutôt une bonne pratique. Nous utilisons ici la gem &lt;strong&gt;capybara&lt;/strong&gt; pour simuler des événements navigateur comme un clique sur un bouton ou encore le remplissage d’un champs de formulaire.&lt;/p&gt;

&lt;p&gt;En lançant la commande suivante:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cucumber&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous devrions voir le résultat de nos tests.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; failed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; skipped, &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;pour-aller-plus-loin-les-tags-et-hooks&quot;&gt;Pour aller plus loin: les tags et hooks&lt;/h1&gt;

&lt;p&gt;Un peu à la manière de &lt;strong&gt;rspec&lt;/strong&gt;, il est parfois nécessaire d’effectuer des actions précise avant l’execution de nos tests pour les faire fonctionner.&lt;/p&gt;

&lt;p&gt;Typiquement, dans le cadre d’une authentification, nous avons besoin d’un utilisateur dans la base de données qui possède l’email et le mot de passe correspondant a notre scénario.&lt;/p&gt;

&lt;p&gt;C’est ainsi qu’interviennent les &lt;em&gt;tags&lt;/em&gt; et les &lt;em&gt;hooks&lt;/em&gt;. Ce sont des manières d’indiquer a &lt;strong&gt;cucumber&lt;/strong&gt; qu’il faut effectuer certaines actions avant (ou après) l’exécution d’un scénario.&lt;/p&gt;

&lt;p&gt;Il suffit de placer un &lt;em&gt;@&lt;/em&gt; suivi du nom d’identifier de votre choix. Ici j’ai choisi &lt;em&gt;@authentication_form&lt;/em&gt;.
Vous pourrez voir où ce place les &lt;em&gt;tags&lt;/em&gt; en regardant l’extrait de code du fichier &lt;em&gt;Authentication.feature&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Le code de notre &lt;em&gt;hook&lt;/em&gt; se placera dans le dossier &lt;em&gt;support&lt;/em&gt;, contenu dans le dossier &lt;em&gt;features&lt;/em&gt;, à la racine de notre application.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;authentication_hooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;@authentication_form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mymail@mail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysecretpassword&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ici rien de particulier, cela ressembles fortement a la directive &lt;em&gt;before&lt;/em&gt;, utilisable avec &lt;strong&gt;rspec&lt;/strong&gt;. Sachez tout de même qu’il existe d’autres types de block, comme &lt;em&gt;After&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 May 2014 12:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2014/05/23/le-behavior-driven-development-avec-cucumber.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2014/05/23/le-behavior-driven-development-avec-cucumber.html</guid>
        
        <category>cucumber</category>
        
        <category>bdd</category>
        
        <category>test</category>
        
        
        <category>tutoriel</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>L’Objective-C pour un développeur C++ 3 – Les protocols</title>
        <description>&lt;p&gt;J’en ai parlé dans mon dernier billet, le terme &lt;em&gt;@protocol&lt;/em&gt; défini le contrat que devra remplir une classe qui décide de le suivre. L’équivalent en &lt;strong&gt;C++&lt;/strong&gt; est une interface.&lt;/p&gt;

&lt;h2 id=&quot;le-code&quot;&gt;Le code&lt;/h2&gt;

&lt;p&gt;MyInterface.h (C++)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceMyClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;p&gt;MyClassProtocol.h (Objective-C)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClassProtocol&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@required&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@optional&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On peut voir que nous pouvons préciser si les méthodes doivent être obligatoirement implémentée ou non grâce aux annotations &lt;em&gt;@required&lt;/em&gt; et &lt;em&gt;@optional&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;utiliser-un-protocole&quot;&gt;Utiliser un protocole&lt;/h2&gt;

&lt;p&gt;Pour hériter d’un protocol il suffit de le préciser dans sa déclaration:&lt;/p&gt;

&lt;p&gt;C++&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;InterfaceMyClass.h&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterfaceMyClass&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;p&gt;Objective-C&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;MyClassProtocol.h&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClassProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il n’y a pas grand chose a dire de plus sur les protocols, si ce n’est que contrairement à l’héritage, vous pouvez choisir d’en respecter plusieurs en même temps.&lt;/p&gt;

</description>
        <pubDate>Fri, 09 May 2014 22:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2014/05/09/l-objective-c-pour-un-developpeur-c++-les-protocols.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2014/05/09/l-objective-c-pour-un-developpeur-c++-les-protocols.html</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>cocoa</category>
        
        <category>c++</category>
        
        
        <category>tutoriel</category>
        
        <category>objective-c</category>
        
      </item>
    
      <item>
        <title>L&#39;Objective-C pour un développeur C++ 2 – déclaration de classe</title>
        <description>&lt;p&gt;Nous allons voir dans ce billet quelques différences entre la déclaration des classes en Objective-C et en C++.&lt;/p&gt;

&lt;h2 id=&quot;cration-dune-classe&quot;&gt;Création d’une classe&lt;/h2&gt;

&lt;p&gt;En &lt;strong&gt;C++&lt;/strong&gt; nous avons besoin de deux fichiers pour créer une classe: un fichier header (.h ou .hh) qui contiendra la description de la classe et un fichier d’implémentation (.cpp) qui contiendra le corps des méthodes définies dans le header. Pour l’&lt;strong&gt;Objective-C&lt;/strong&gt;, cela est fortement similaire, excepté l’extension du fichier d’implémentation (.m au lieu de .cpp)&lt;/p&gt;

&lt;p&gt;MyClass.h (C++)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addNumberAToNumberB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;MyClass.h (Objective-C)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inteface&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addNumberA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toNumberB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vous pouvez voir quelques différences: Tout d’abord la syntaxe: &lt;em&gt;@interface&lt;/em&gt; et &lt;em&gt;@end&lt;/em&gt; qui délimite la définition de la classe.&lt;/p&gt;

&lt;p&gt;Attention toutefois, &lt;em&gt;interface&lt;/em&gt; n’a pas la même signification en &lt;strong&gt;C++&lt;/strong&gt;. Son équivalent en &lt;strong&gt;Objective-C&lt;/strong&gt; est le &lt;em&gt;protocol&lt;/em&gt; que nous verrons plus tard.&lt;/p&gt;

&lt;p&gt;@property permet de déclarer une variable d’instance.Les getters et setters des &lt;em&gt;@property&lt;/em&gt; sont générés automatiquement. Il est possible de redéfinir le nom des setters/getter, et de préciser si vous ne voulez générer qu’un getter.&lt;/p&gt;

&lt;p&gt;Le signe - en &lt;strong&gt;Objective-C&lt;/strong&gt; signifie que nous déclarons une méthode d’instance. Le signe +, lui, signifie que nous déclarons une méthode de classe.&lt;/p&gt;

&lt;p&gt;Le nom des méthodes avec plusieurs arguments sont scindés en fonction du nombre de ces derniers. Cela peut paraitre assez déroutant mais cela nous force à écrire des noms de méthode très explicite.&lt;/p&gt;

&lt;p&gt;Il n’y a pas vraiment de méthode ou attributs privés, en effet tout ce qui est exposé dans l’&lt;em&gt;@interface&lt;/em&gt; est public.&lt;/p&gt;

&lt;p&gt;Le code privé est donc laissé à la discrétion du développeur dans le fichier d’implémentation.&lt;/p&gt;

&lt;p&gt;Comme en &lt;strong&gt;C++&lt;/strong&gt;, l’héritage se fait après le nom de la classe suivi des deux points.Il est important de préciser que contrairement au &lt;strong&gt;C++&lt;/strong&gt;, avec l’&lt;strong&gt;Objective-C&lt;/strong&gt; nous ne pouvons pas faire d’héritages multiple.&lt;/p&gt;

&lt;h2 id=&quot;implmentation&quot;&gt;Implémentation&lt;/h2&gt;

&lt;p&gt;L’implémentation est assez similaire dans les deux langages:&lt;/p&gt;

&lt;p&gt;MyClass.cpp&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;MyClass.h&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addNumberAToNumberB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;MyClass.m&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;MyClass.h&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addNumberA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toNumberB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// content&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La qualification des fonctions est toutefois nécessaire au &lt;strong&gt;C++&lt;/strong&gt;, alors qu’en &lt;strong&gt;Objective-C&lt;/strong&gt; seul le nom des fonctions est requis.
Le &lt;em&gt;@implementation&lt;/em&gt; défini un scope un peu comme un namespace.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 May 2014 22:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2014/05/08/l-objective-c-pour-un-developpeur-c++-declaration-d-une-classe.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2014/05/08/l-objective-c-pour-un-developpeur-c++-declaration-d-une-classe.html</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>cocoa</category>
        
        <category>c++</category>
        
        
        <category>tutoriel</category>
        
        <category>objective-c</category>
        
      </item>
    
      <item>
        <title>L’Objective-C pour un développeur C++ 1 – Introduction, types et syntaxe</title>
        <description>&lt;p&gt;Je vous propose une approche originale pour appréhender l’Objective-C en me mettant à la place d’un développeur C++.&lt;/p&gt;

&lt;p&gt;On va voir dans cette suite de billets les principales différences et ressemblances entre ces deux langages.&lt;/p&gt;

&lt;h2 id=&quot;historique&quot;&gt;Historique&lt;/h2&gt;

&lt;p&gt;L’Objective-C, comme le C++ est un langage orienté objet basé sur le C. Il est utilisé par la société NeXT (fondée par Steve Jobs) pour créer l’OS nommé NeXTSTEP. NeXT fut racheté par Apple et l’OS  deviendra la base de Mac OS X. Source&lt;/p&gt;

&lt;p&gt;Quelques différences au niveau des types du langage&lt;/p&gt;

&lt;p&gt;Le type boolean (&lt;em&gt;bool&lt;/em&gt; en C++) s’écrit &lt;em&gt;BOOL&lt;/em&gt; et il prend les valeurs &lt;em&gt;YES&lt;/em&gt; ou &lt;em&gt;NO&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Il existe un pointeur générique d’objet: id. (grossomodo l’équivalent du void* en C++)&lt;/p&gt;

&lt;p&gt;nil est préférable a NULL.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integerPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;cocoa&quot;&gt;Cocoa&lt;/h2&gt;

&lt;p&gt;C’est la librairie native utilisée par Apple pour l’Objective-C, on y trouve des classes comme NSString, NSArray, NSLog. On peut y voir une équivalence sur certains points de la STL en C++.&lt;/p&gt;

&lt;p&gt;Appels de méthode (envoi de messages)&lt;/p&gt;

&lt;p&gt;Comme tout langage objet, vous écrirez des méthodes dans vos classes. Seulement l’Objective-C possède une syntaxe assez particulière pour faire appelle a celles-ci:&lt;/p&gt;

&lt;p&gt;prog.cpp&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;p&gt;prog.m&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;la-gestion-de-mmoire&quot;&gt;La gestion de mémoire&lt;/h2&gt;

&lt;p&gt;Le compilateur de l’Objective-C nous propose une feature plutôt cool: l’Automatic Reference Counting (ARC pour les intimes)&lt;/p&gt;

&lt;p&gt;Cette fonctionnalité permet au compilateur de savoir exactement où libérer la mémoire des objets que vous allouez dans votre code.
&lt;em&gt;CE N’EST PAS UN GARBAGE COLLECTOR!&lt;/em&gt; Le compilateur sait avec certitude a quel moment votre objet n’est plus utilisé et donc libérer son allocation mémoire en toute sécurité. L’avantage est que vous n’aurez pas à vous souciez de savoir si vous avez bien delete toutes vos resources, le défaut est que vous perdez totalement la main sur la dés-allocation mémoire.&lt;/p&gt;

&lt;p&gt;Nous verrons dans un prochain billet la création de classe en Objective-C.&lt;/p&gt;

</description>
        <pubDate>Wed, 07 May 2014 22:00:00 +0200</pubDate>
        <link>http://clement-demily.fr/2014/05/07/l-objective-c-pour-un-developpeur-c++-introduction-type-et-syntaxe.html</link>
        <guid isPermaLink="true">http://clement-demily.fr/2014/05/07/l-objective-c-pour-un-developpeur-c++-introduction-type-et-syntaxe.html</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>cocoa</category>
        
        <category>c++</category>
        
        
        <category>tutoriel</category>
        
        <category>objective-c</category>
        
      </item>
    
  </channel>
</rss>
